/*
 * Generated by orval v5.4.12 üç∫
 * Do not edit manually.
 * Test openapi
 * testing fastify with openapi
 * OpenAPI spec version: 0.1.0
 */
import axios, { AxiosRequestConfig, AxiosResponse } from 'axios'
import { useMutation, UseMutationOptions } from 'react-query'
export type PostTodoBody = {
  name: string
  description?: string
  done?: boolean
}

export type PostTodo200 = {
  name: string
  description?: string
  done?: boolean
}

type AsyncReturnType<
  T extends (...args: any) => Promise<any>,
  U = unknown
> = T extends (...args: any) => Promise<infer R> ? (U extends R ? U : R) : any

export const postTodo = <TData = AxiosResponse<PostTodo200>>(
  postTodoBody: PostTodoBody,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.post(`/todo`, postTodoBody, options)
}

export const usePostTodo = <
  TData = AsyncReturnType<typeof postTodo, AxiosResponse<PostTodo200>>,
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<TData, TError, { data: PostTodoBody }, TContext>
  axios?: AxiosRequestConfig
}) => {
  const { mutation: mutationOptions, axios: axiosOptions } = options || {}

  return useMutation<TData, TError, { data: PostTodoBody }, TContext>(
    (props) => {
      const { data } = props || {}

      return postTodo<TData>(data, axiosOptions)
    },
    mutationOptions
  )
}
